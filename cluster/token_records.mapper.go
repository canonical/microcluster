package cluster

// The code below was generated by lxd-generate - DO NOT EDIT!

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"net/http"
	"strings"

	"github.com/canonical/lxd/lxd/db/query"
	"github.com/canonical/lxd/shared/api"
)

var _ = api.ServerEnvironment{}

var internalTokenRecordObjects = RegisterStmt(`
SELECT internal_token_records.id, internal_token_records.secret, internal_token_records.name, internal_token_records.role
  FROM internal_token_records
  ORDER BY internal_token_records.secret
`)

var internalTokenRecordObjectsBySecret = RegisterStmt(`
SELECT internal_token_records.id, internal_token_records.secret, internal_token_records.name, internal_token_records.role
  FROM internal_token_records
  WHERE ( internal_token_records.secret = ? )
  ORDER BY internal_token_records.secret
`)

var internalTokenRecordID = RegisterStmt(`
SELECT internal_token_records.id FROM internal_token_records
  WHERE internal_token_records.secret = ?
`)

var internalTokenRecordCreate = RegisterStmt(`
INSERT INTO internal_token_records (secret, name, role)
  VALUES (?, ?, ?)
`)

var internalTokenRecordDeleteByName = RegisterStmt(`
DELETE FROM internal_token_records WHERE name = ?
`)

// GetInternalTokenRecordID return the ID of the internal_token_record with the given key.
// generator: internal_token_record ID
func GetInternalTokenRecordID(ctx context.Context, tx *sql.Tx, secret string) (int64, error) {
	stmt, err := Stmt(tx, internalTokenRecordID)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"internalTokenRecordID\" prepared statement: %w", err)
	}

	row := stmt.QueryRowContext(ctx, secret)
	var id int64
	err = row.Scan(&id)
	if errors.Is(err, sql.ErrNoRows) {
		return -1, api.StatusErrorf(http.StatusNotFound, "InternalTokenRecord not found")
	}

	if err != nil {
		return -1, fmt.Errorf("Failed to get \"internal_token_records\" ID: %w", err)
	}

	return id, nil
}

// InternalTokenRecordExists checks if a internal_token_record with the given key exists.
// generator: internal_token_record Exists
func InternalTokenRecordExists(ctx context.Context, tx *sql.Tx, secret string) (bool, error) {
	_, err := GetInternalTokenRecordID(ctx, tx, secret)
	if err != nil {
		if api.StatusErrorCheck(err, http.StatusNotFound) {
			return false, nil
		}

		return false, err
	}

	return true, nil
}

// GetInternalTokenRecord returns the internal_token_record with the given key.
// generator: internal_token_record GetOne
func GetInternalTokenRecord(ctx context.Context, tx *sql.Tx, secret string) (*InternalTokenRecord, error) {
	filter := InternalTokenRecordFilter{}
	filter.Secret = &secret

	objects, err := GetInternalTokenRecords(ctx, tx, filter)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"internal_token_records\" table: %w", err)
	}

	switch len(objects) {
	case 0:
		return nil, api.StatusErrorf(http.StatusNotFound, "InternalTokenRecord not found")
	case 1:
		return &objects[0], nil
	default:
		return nil, fmt.Errorf("More than one \"internal_token_records\" entry matches")
	}
}

// internalTokenRecordColumns returns a string of column names to be used with a SELECT statement for the entity.
// Use this function when building statements to retrieve database entries matching the InternalTokenRecord entity.
func internalTokenRecordColumns() string {
	return "internal_token_records.id, internal_token_records.secret, internal_token_records.name, internal_token_records.role"
}

// getInternalTokenRecords can be used to run handwritten sql.Stmts to return a slice of objects.
func getInternalTokenRecords(ctx context.Context, stmt *sql.Stmt, args ...any) ([]InternalTokenRecord, error) {
	objects := make([]InternalTokenRecord, 0)

	dest := func(scan func(dest ...any) error) error {
		i := InternalTokenRecord{}
		err := scan(&i.ID, &i.Secret, &i.Name, &i.Role)
		if err != nil {
			return err
		}

		objects = append(objects, i)

		return nil
	}

	err := query.SelectObjects(ctx, stmt, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"internal_token_records\" table: %w", err)
	}

	return objects, nil
}

// getInternalTokenRecordsRaw can be used to run handwritten query strings to return a slice of objects.
func getInternalTokenRecordsRaw(ctx context.Context, tx *sql.Tx, sql string, args ...any) ([]InternalTokenRecord, error) {
	objects := make([]InternalTokenRecord, 0)

	dest := func(scan func(dest ...any) error) error {
		i := InternalTokenRecord{}
		err := scan(&i.ID, &i.Secret, &i.Name, &i.Role)
		if err != nil {
			return err
		}

		objects = append(objects, i)

		return nil
	}

	err := query.Scan(ctx, tx, sql, dest, args...)
	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"internal_token_records\" table: %w", err)
	}

	return objects, nil
}

// GetInternalTokenRecords returns all available internal_token_records.
// generator: internal_token_record GetMany
func GetInternalTokenRecords(ctx context.Context, tx *sql.Tx, filters ...InternalTokenRecordFilter) ([]InternalTokenRecord, error) {
	var err error

	// Result slice.
	objects := make([]InternalTokenRecord, 0)

	// Pick the prepared statement and arguments to use based on active criteria.
	var sqlStmt *sql.Stmt
	args := []any{}
	queryParts := [2]string{}

	if len(filters) == 0 {
		sqlStmt, err = Stmt(tx, internalTokenRecordObjects)
		if err != nil {
			return nil, fmt.Errorf("Failed to get \"internalTokenRecordObjects\" prepared statement: %w", err)
		}
	}

	for i, filter := range filters {
		if filter.Secret != nil && filter.ID == nil && filter.Name == nil && filter.Role == nil {
			args = append(args, []any{filter.Secret}...)
			if len(filters) == 1 {
				sqlStmt, err = Stmt(tx, internalTokenRecordObjectsBySecret)
				if err != nil {
					return nil, fmt.Errorf("Failed to get \"internalTokenRecordObjectsBySecret\" prepared statement: %w", err)
				}

				break
			}

			query, err := StmtString(internalTokenRecordObjectsBySecret)
			if err != nil {
				return nil, fmt.Errorf("Failed to get \"internalTokenRecordObjects\" prepared statement: %w", err)
			}

			parts := strings.SplitN(query, "ORDER BY", 2)
			if i == 0 {
				copy(queryParts[:], parts)
				continue
			}

			_, where, _ := strings.Cut(parts[0], "WHERE")
			queryParts[0] += "OR" + where
		} else if filter.ID == nil && filter.Secret == nil && filter.Name == nil && filter.Role == nil {
			return nil, fmt.Errorf("Cannot filter on empty InternalTokenRecordFilter")
		} else {
			return nil, fmt.Errorf("No statement exists for the given Filter")
		}
	}

	// Select.
	if sqlStmt != nil {
		objects, err = getInternalTokenRecords(ctx, sqlStmt, args...)
	} else {
		queryStr := strings.Join(queryParts[:], "ORDER BY")
		objects, err = getInternalTokenRecordsRaw(ctx, tx, queryStr, args...)
	}

	if err != nil {
		return nil, fmt.Errorf("Failed to fetch from \"internal_token_records\" table: %w", err)
	}

	return objects, nil
}

// CreateInternalTokenRecord adds a new internal_token_record to the database.
// generator: internal_token_record Create
func CreateInternalTokenRecord(ctx context.Context, tx *sql.Tx, object InternalTokenRecord) (int64, error) {
	// Check if a internal_token_record with the same key exists.
	exists, err := InternalTokenRecordExists(ctx, tx, object.Secret)
	if err != nil {
		return -1, fmt.Errorf("Failed to check for duplicates: %w", err)
	}

	if exists {
		return -1, api.StatusErrorf(http.StatusConflict, "This \"internal_token_records\" entry already exists")
	}

	args := make([]any, 3)

	// Populate the statement arguments.
	args[0] = object.Secret
	args[1] = object.Name
	args[2] = object.Role

	// Prepared statement to use.
	stmt, err := Stmt(tx, internalTokenRecordCreate)
	if err != nil {
		return -1, fmt.Errorf("Failed to get \"internalTokenRecordCreate\" prepared statement: %w", err)
	}

	// Execute the statement.
	result, err := stmt.Exec(args...)
	if err != nil {
		return -1, fmt.Errorf("Failed to create \"internal_token_records\" entry: %w", err)
	}

	id, err := result.LastInsertId()
	if err != nil {
		return -1, fmt.Errorf("Failed to fetch \"internal_token_records\" entry ID: %w", err)
	}

	return id, nil
}

// DeleteInternalTokenRecord deletes the internal_token_record matching the given key parameters.
// generator: internal_token_record DeleteOne-by-Name
func DeleteInternalTokenRecord(ctx context.Context, tx *sql.Tx, name string) error {
	stmt, err := Stmt(tx, internalTokenRecordDeleteByName)
	if err != nil {
		return fmt.Errorf("Failed to get \"internalTokenRecordDeleteByName\" prepared statement: %w", err)
	}

	result, err := stmt.Exec(name)
	if err != nil {
		return fmt.Errorf("Delete \"internal_token_records\": %w", err)
	}

	n, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("Fetch affected rows: %w", err)
	}

	if n == 0 {
		return api.StatusErrorf(http.StatusNotFound, "InternalTokenRecord not found")
	} else if n > 1 {
		return fmt.Errorf("Query deleted %d InternalTokenRecord rows instead of 1", n)
	}

	return nil
}
